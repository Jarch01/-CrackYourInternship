//There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

//Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
    
//Using DP

class Solution {
    public int uniquePaths(int m, int n) {
        int a[][] = new int[m+1][n+1];
        for(int i=0;i<m;i++)            //Array to store overlapping subproblems
            for(int j=0;j<n;j++)
                a[i][j]=-1;
        int ans=Paths(0,0,m-1,n-1,a);
        return ans;
    }
    public int Paths(int m, int n,int maxM, int maxN,int[][] a)
    {
        if(m<0||m>maxM||n<0||n>maxN)  //Condition for out of grid
            return 0;
        if(m==maxM&&n==maxN)    //check for achieving the target
            return 1;
        if(a[m][n]!=-1)
            return a[m][n];
        
        int down=Paths(m,n+1,maxM,maxN,a);  //Path for down movement
        int right=Paths(m+1,n,maxM,maxN,a); //Path for right movement
        
        a[m][n]=down+right;   //Total number of paths
        return a[m][n];
    }
}
