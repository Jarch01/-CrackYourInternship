/*Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        List<TreeNode> set = new ArrayList<>(); //List to store the node reference for root value equals subroot
        Findroot(root,subRoot,set);
        for(TreeNode element : set)
        {
            if(isEqual(subRoot,element))
                return true;
        }
        return false;
    }
    public void Findroot(TreeNode root, TreeNode subroot, List<TreeNode> set) //Finding the nodes equal to subroot
    {
        if(root==null)
            return ;
        if(root.val==subroot.val)
            set.add(root);
        Findroot(root.left,subroot,set);
        Findroot(root.right,subroot,set);
        return ;
    }
    public boolean isEqual(TreeNode root1,TreeNode root2) //Check whether both the trees are equal
    {
        if(root1==null&&root2==null)
            return true;
        if(root1==null||root2==null)
            return false;
        if(root1.val!=root2.val)
            return false;
        boolean leftPath=isEqual(root1.left,root2.left);
        boolean rightPath=isEqual(root1.right,root2.right);
        return leftPath&&rightPath;
    }
}
