/*Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.*/
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);  //Sorted in order to do search traversal in HashSet
        List<List<Integer>> ans = new ArrayList<>();
        FindFourSum(nums,0,target,4,ans,new ArrayList<Integer>(),new HashSet<List<Integer>>());
        return ans;
    }
    public void FindFourSum(int[] n,int ci,int s,int tran,List<List<Integer>> ans,List<Integer>Cans,HashSet<List<Integer>> set)
    {
        if(tran==0)  //Total number of numbers require becomes 0
        {
            if(s==0&&set.contains(Cans)==false) //HashSet to access the previous encounter 
            {
                ans.add(new ArrayList<>(Cans));
                set.add(Cans);
            }
            return ;
        }
        if(ci>=n.length)
            return ;
        //Take
        Cans.add(n[ci]);
        FindFourSum(n,ci+1,s-n[ci],tran-1,ans,Cans,set);
        Cans.remove(Cans.size()-1);
        
        //Leave
        FindFourSum(n,ci+1,s,tran,ans,Cans,set);
        return ;
    }
}
