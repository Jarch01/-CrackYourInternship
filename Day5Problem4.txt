/*
 You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        TreeNode ans = new TreeNode();
        ans=merging(root1,root2);
        return ans;
    }
    public TreeNode merging(TreeNode root1, TreeNode root2)
    {
        if(root1==null)
            return root2;   //if one of the tree ends
        if(root2==null)
            return root1;
        int newVal=root1.val+root2.val;
        TreeNode add = new TreeNode(newVal);
        add.left=merging(root1.left,root2.left);  //New left node path
        add.right=merging(root1.right,root2.right);  //New right node path
        return add;
    }
}
