//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

//Notice that the solution set must not contain duplicate triplets.

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);   //Sorted in order to search in the HashSet for duplicates
        List<List<Integer>> ans = new ArrayList<>();
        FindThreeSum(nums,0,0,3,ans,new ArrayList<Integer>(),new HashSet<List<Integer>>());
        return ans;
    }
    public void FindThreeSum(int[] n,int ci,int s,int tran,List<List<Integer>> ans,List<Integer>Cans,HashSet<List<Integer>> set)
    {
        if(tran==0)   //When total number required becomes 0
        {
            if(s==0&&set.contains(Cans)==false)  //Check in hashset for duplicate
            {
                ans.add(new ArrayList<>(Cans));  //Added in the answer
                set.add(Cans);
            }
            return ;
        }
        if(ci>=n.length)
            return ;
        //Take
        Cans.add(n[ci]);
        FindThreeSum(n,ci+1,s-n[ci],tran-1,ans,Cans,set);
        Cans.remove(Cans.size()-1);
        
        //Leave
        FindThreeSum(n,ci+1,s,tran,ans,Cans,set);
        return ;
    }
}
