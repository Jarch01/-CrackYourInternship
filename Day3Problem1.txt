//Given an m x n matrix, return all elements of the matrix in spiral order.

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int rowMin = 0;
        int colMin = 0;
        int rowMax = matrix.length - 1;
        int colMax = matrix[0].length - 1;
        
        int quantity = matrix.length * matrix[0].length;
        List<Integer> result = new ArrayList<>();

        while(result.size() < quantity) {
            // right
            if(rowMin <= rowMax) {
                for(int i = colMin; i <= colMax; i++) {
                    result.add(matrix[rowMin][i]);
                }
                
                rowMin++;
            }
            
            // down
            if(colMin <= colMax) {
                for(int i = rowMin; i <= rowMax; i++) {
                    result.add(matrix[i][colMax]);
                }
                
                colMax--;
            }
            
            
            // left
            if(rowMin <= rowMax) {
                for(int i = colMax; i >= colMin; i--) {
                    result.add(matrix[rowMax][i]);
                }
                
                rowMax--;
            }
            
            // up
            if(colMin <= colMax) {
                for(int i = rowMax; i >= rowMin; i--) {
                    result.add(matrix[i][colMin]);
                }
                
                colMin++;
            }
        }
        
        return result;
    }
}
